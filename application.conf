deepdive {
  
  db.default: {
    driver: "org.postgresql.Driver"
    url: "jdbc:postgresql://localhost/deepdive_kbp"
    user: "czhang"
    password: "bB19871121"
  }

  calibration: {
    holdout_fraction: 0.5
  }

  schema.variables:{
    relations._per_children: Boolean
    relations._per_parents : Boolean 
    relations._per_city_of_death : Boolean 
    relations._org_founded_by  : Boolean 
    relations._per_spouse : Boolean
    relations._per_spouse  : Boolean 
    relations._org_top_members_employees: Boolean
    relations._per_member_of : Boolean
    relations._org_subsidaries : Boolean
    relations._org_parents : Boolean
    relations._org_city_of_headquarters: Boolean 
    relations._per_siblings : Boolean
    relations._per_city_of_birth : Boolean
    relations._per_stateorprovinces_of_residence: Boolean 
    relations._per_employee_of : Boolean
    relations._per_cities_of_residence : Boolean
    relations._per_countries_of_residence : Boolean
    relations._per_title : Boolean
    relations._per_schools_attended : Boolean
  }

  relations: {}

  extraction.extractors: {

    load_relations: {
        output_relation: "relations"
        input: "select distinct mid1, mid2, mention1, mention2 from relation_features;"
        udf: "../kbp/udf/load_relations.py"
        output_batch_size: 100000
    }

    supervise: {
        output_relation: "relations"
        input: "SELECT 0;"
        udf: "../kbp/udf/load_relations.py"
        after: "../kbp/udf/supervise.sh"
    }


  }


  inference.factors: {

    relation_per_title:{
        input_query: """
                      select t0.*, t1.* 
                      from  relation_features t0, relations t1
                      WHERE t0.mid1=t1.mid1 AND t0.mid2=t1.mid2;
                     """
        function   : "Imply(relations._per_title)"
        weight     : "?(relation_features.feature)"
    }
    

    relation_per_parents:{
        input_query: """
                      select t0.*, t1.* 
                      from  relation_features t0, relations t1
                      WHERE t0.mid1=t1.mid1 AND t0.mid2=t1.mid2;
                     """
        function   : "Imply(relations._per_parents)"
        weight     : "?(relation_features.feature)"
    }
    

    relation_per_city_of_death:{
        input_query: """
                      select t0.*, t1.* 
                      from  relation_features t0, relations t1
                      WHERE t0.mid1=t1.mid1 AND t0.mid2=t1.mid2;
                     """
        function   : "Imply(relations._per_city_of_death)"
        weight     : "?(relation_features.feature)"
    }
    

    relation_org_founded_by:{
        input_query: """
                      select t0.*, t1.* 
                      from  relation_features t0, relations t1
                      WHERE t0.mid1=t1.mid1 AND t0.mid2=t1.mid2;
                     """
        function   : "Imply(relations._org_founded_by)"
        weight     : "?(relation_features.feature)"
    }
    

    relation_per_spouse:{
        input_query: """
                      select t0.*, t1.* 
                      from  relation_features t0, relations t1
                      WHERE t0.mid1=t1.mid1 AND t0.mid2=t1.mid2;
                     """
        function   : "Imply(relations._per_spouse)"
        weight     : "?(relation_features.feature)"
    }
    

    relation_per_cities_of_residence:{
        input_query: """
                      select t0.*, t1.* 
                      from  relation_features t0, relations t1
                      WHERE t0.mid1=t1.mid1 AND t0.mid2=t1.mid2;
                     """
        function   : "Imply(relations._per_cities_of_residence)"
        weight     : "?(relation_features.feature)"
    }
    

    relation_per_member_of:{
        input_query: """
                      select t0.*, t1.* 
                      from  relation_features t0, relations t1
                      WHERE t0.mid1=t1.mid1 AND t0.mid2=t1.mid2;
                     """
        function   : "Imply(relations._per_member_of)"
        weight     : "?(relation_features.feature)"
    }
    

    relation_org_subsidaries:{
        input_query: """
                      select t0.*, t1.* 
                      from  relation_features t0, relations t1
                      WHERE t0.mid1=t1.mid1 AND t0.mid2=t1.mid2;
                     """
        function   : "Imply(relations._org_subsidaries)"
        weight     : "?(relation_features.feature)"
    }
    

    relation_per_countries_of_residence:{
        input_query: """
                      select t0.*, t1.* 
                      from  relation_features t0, relations t1
                      WHERE t0.mid1=t1.mid1 AND t0.mid2=t1.mid2;
                     """
        function   : "Imply(relations._per_countries_of_residence)"
        weight     : "?(relation_features.feature)"
    }
    

    relation_org_city_of_headquarters:{
        input_query: """
                      select t0.*, t1.* 
                      from  relation_features t0, relations t1
                      WHERE t0.mid1=t1.mid1 AND t0.mid2=t1.mid2;
                     """
        function   : "Imply(relations._org_city_of_headquarters)"
        weight     : "?(relation_features.feature)"
    }
    

    relation_per_stateorprovinces_of_residence:{
        input_query: """
                      select t0.*, t1.* 
                      from  relation_features t0, relations t1
                      WHERE t0.mid1=t1.mid1 AND t0.mid2=t1.mid2;
                     """
        function   : "Imply(relations._per_stateorprovinces_of_residence)"
        weight     : "?(relation_features.feature)"
    }
    

    relation_per_city_of_birth:{
        input_query: """
                      select t0.*, t1.* 
                      from  relation_features t0, relations t1
                      WHERE t0.mid1=t1.mid1 AND t0.mid2=t1.mid2;
                     """
        function   : "Imply(relations._per_city_of_birth)"
        weight     : "?(relation_features.feature)"
    }
    

    relation_per_siblings:{
        input_query: """
                      select t0.*, t1.* 
                      from  relation_features t0, relations t1
                      WHERE t0.mid1=t1.mid1 AND t0.mid2=t1.mid2;
                     """
        function   : "Imply(relations._per_siblings)"
        weight     : "?(relation_features.feature)"
    }
    

    relation_per_employee_of:{
        input_query: """
                      select t0.*, t1.* 
                      from  relation_features t0, relations t1
                      WHERE t0.mid1=t1.mid1 AND t0.mid2=t1.mid2;
                     """
        function   : "Imply(relations._per_employee_of)"
        weight     : "?(relation_features.feature)"
    }
    

    relation_org_top_members_employees:{
        input_query: """
                      select t0.*, t1.* 
                      from  relation_features t0, relations t1
                      WHERE t0.mid1=t1.mid1 AND t0.mid2=t1.mid2;
                     """
        function   : "Imply(relations._org_top_members_employees)"
        weight     : "?(relation_features.feature)"
    }
    

    relation_per_schools_attended:{
        input_query: """
                      select t0.*, t1.* 
                      from  relation_features t0, relations t1
                      WHERE t0.mid1=t1.mid1 AND t0.mid2=t1.mid2;
                     """
        function   : "Imply(relations._per_schools_attended)"
        weight     : "?(relation_features.feature)"
    }
    

    relation_org_parents:{
        input_query: """
                      select t0.*, t1.* 
                      from  relation_features t0, relations t1
                      WHERE t0.mid1=t1.mid1 AND t0.mid2=t1.mid2;
                     """
        function   : "Imply(relations._org_parents)"
        weight     : "?(relation_features.feature)"
    }
    

    relation_per_children:{
        input_query: """
                      select t0.*, t1.* 
                      from  relation_features t0, relations t1
                      WHERE t0.mid1=t1.mid1 AND t0.mid2=t1.mid2;
                     """
        function   : "Imply(relations._per_children)"
        weight     : "?(relation_features.feature)"
    }

  }

  sampler.sampler_args: "-l 100 -s 1 -i 100 -t 60 --diminish 0.95 --alpha 0.1"
  sampler.java_args = "-Xmx8g"

}





























